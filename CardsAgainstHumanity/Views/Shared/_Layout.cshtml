<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
</head>
    <body>        
        <div class="navbar navbar-inverse navbar-fixed-top">
            <a href="https://github.com/SergeiGolos/CardsAgainstHumanity" style="z-index: 1090;">
                <img style="position: absolute; top: 0; right: 0; border: 0;"
                     src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png"
                     alt="Fork me on GitHub">
            </a>    
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    @Html.ActionLink("#CAH - Rando Generator", "Index", "Home", null, new { @class = "navbar-brand" })
                </div>
                <div class="navbar-collapse collapse">
                    <ul class="nav navbar-nav">
                          
                    </ul>
                </div>
            </div>
        </div>
        <div class="container body-content">
            @RenderBody()
            <hr />
            <footer>
                <p>Completely unofficial Rando generator using Cards Against Humanity text. Get the real life party game at <a href="http://www.cardsagainsthumanity.com/">http://www.cardsagainsthumanity.com/</a> </p>
            </footer>
        </div>

        @Scripts.Render("~/bundles/lib")
        @Scripts.Render("~/bundles/src")
        
        <script type="text/javascript" src="//www.gstatic.com/cv/js/sender/v1/cast_sender.js"></script>
        <script type="text/javascript">
            var applicationID = 'B3A0139B';
            var namespace = 'urn:x-cast:com.google.cast.bissellplace.CAH';
            var session = null;

            /**
            * Call initialization for Cast
            */
            if (!chrome.cast || !chrome.cast.isAvailable) {
                setTimeout(initializeCastApi, 1000);
            }

            /**
            * initialization
            */
            function initializeCastApi() {
                var sessionRequest = new chrome.cast.SessionRequest(applicationID);
                var apiConfig = new chrome.cast.ApiConfig(sessionRequest,
                sessionListener,
                receiverListener);

                chrome.cast.initialize(apiConfig, onInitSuccess, onError);
            };

            /**
            * initialization success callback
            */
            function onInitSuccess() {
                appendMessage("onInitSuccess");
            }

            /**
            * initialization error callback
            */
            function onError(message) {
                appendMessage("onError: " + JSON.stringify(message));
            }

            /**
            * generic success callback
            */
            function onSuccess(message) {
                appendMessage("onSuccess: " + message);
            }

            /**
            * callback on success for stopping app
            */
            function onStopAppSuccess() {
                appendMessage('onStopAppSuccess');
            }

            /**
            * session listener during initialization
            */
            function sessionListener(e) {
                appendMessage('New session ID:' + e.sessionId);
                session = e;
                session.addUpdateListener(sessionUpdateListener);
                session.addMessageListener(namespace, receiverMessage);
            }

            /**
            * listener for session updates
            */
            function sessionUpdateListener(isAlive) {
                var message = isAlive ? 'Session Updated' : 'Session Removed';
                message += ': ' + session.sessionId;
                appendMessage(message);
                if (!isAlive) {
                    session = null;
                }
            };

            /**
            * utility function to log messages from the receiver
            * @@param {string} namespace The namespace of the message
            * @@param {string} message A message string
            */
            function receiverMessage(namespace, message) {
                appendMessage("receiverMessage: " + namespace + ", " + message);
            };

            /**
            * receiver listener during initialization
            */
            function receiverListener(e) {
                if (e === 'available') {
                    appendMessage("receiver found");
                }
                else {
                    appendMessage("receiver list empty");
                }
            }

            /**
            * stop app/session
            */
            function stopApp() {
                session.stop(onStopAppSuccess, onError);
            }

            /**
            * send a message to the receiver using the custom namespace
            * receiver CastMessageBus message handler will be invoked
            * @@param {string} message A message string
            */
            function sendMessage(message) {
                if (session != null) {
                    session.sendMessage(namespace, message, onSuccess.bind(this, "Message sent: " + message), onError);
                }
                else {
                    chrome.cast.requestSession(function (e) {
                        session = e;
                        session.addUpdateListener(sessionUpdateListener);
                        session.addMessageListener(namespace, receiverMessage);
                        session.sendMessage(namespace, message, onSuccess.bind(this, "Message sent: " + message), onError);
                    }, onError);
                }
            }

            /**
            * append message to debug message window
            * @@param {string} message A message string
            */
            function appendMessage(message) {
                console.log(message);
                var dw = document.getElementById("debugmessage");
                dw.innerHTML += '\n' + JSON.stringify(message);
            };

            /**
            * utility function to handle text typed in by user in the input field
            */
            function update() {
                sendMessage(document.getElementById("input").value);
            }

            /**
            * handler for the transcribed text from the speech input
            * @@param {string} words A transcibed speech string
            */
            function transcribe(words) {
                sendMessage(words);
            }
        </script>

        @RenderSection("scripts", required: false)
    </body>
</html>
